#!/usr/bin/env python
"""
Test our Hamiltonian Monte Carlo sampler.
"""


import time
import hais.hmc as hmc
import numpy as np
import scipy.stats as st
import tensorflow as tf
import matplotlib.pyplot as plt
import seaborn as sns


#
# Jupyter magic
#
# %load_ext autoreload
# %autoreload 2


SEED = 37
NCHAINS = 20000
NITER = 10000
# normal parameters
MU = 1.
SIGMA = .5
#
# HMC parameters
STEPSIZE = .5
# STEPSIZE_INITIAL = .01
# STEPSIZE_MIN = 1e-8
# STEPSIZE_MAX = 500
# STEPSIZE_DEC = .99
# STEPSIZE_INC = 1.01


#
# Seed RNGs
tf.set_random_seed(SEED)
np.random.seed(SEED)


def unnormalized_normal_lpdf(x):
  """
  Unnormalized log probability density function of the normal(MU, SIGMA) distribution.
  """
  # print(x.shape)
  assert x.shape == (NCHAINS,)
  return - tf.square((x - MU) / SIGMA) / 2.

#
# Prior for initial x
prior = tf.distributions.Normal(loc=tf.zeros(NCHAINS), scale=tf.ones(NCHAINS))
#
# Sample
x, v, samples_final, smoothed_accept_rate_final = hmc.hmc_sample(
    prior.sample(), unnormalized_normal_lpdf, eps=STEPSIZE,
    niter=NITER, nchains=NCHAINS)
#
# Construct and initialise the session
sess = tf.Session()
sess.run(tf.global_variables_initializer())
#
# Run sampler
print('Running sampler')
starttime = time.time()
samples_hmc, accept_hmc = sess.run((samples_final.stack(), smoothed_accept_rate_final))
endtime = time.time()
print('Sampler took {:.1g} seconds'.format(endtime - starttime))
samples_hmc.shape
burned_in = samples_hmc[int(NITER / 2):]
burned_in.shape
burned_in.size / 1e6
print('Mean of (burned in) samples: {:.3g}'.format(np.mean(burned_in)))
print('Desired mean               : {:.3g}'.format(MU))
print('Standard deviation of (burned in) samples: {:.3g}'.format(np.std(burned_in)))
print('Desired standard deviation               : {:.3g}'.format(SIGMA))
#
# Drop samples so we don't have too many per chain
MAX_SAMPLES_PER_CHAIN = 47
if burned_in.shape[0] > MAX_SAMPLES_PER_CHAIN:
  burned_in = burned_in[::(int(burned_in.shape[0] / MAX_SAMPLES_PER_CHAIN) + 1)]
burned_in.shape

#
# Plot samples
print('Plotting samples')
fig, (ax, ax_accept) = plt.subplots(2, 1, figsize=(8, 12))
sns.distplot(burned_in.flatten(), ax=ax)
ax.set_xlabel('x')
ax.set_title('Samples')
# Plot the pdf
xmin, xmax = ax.get_xbound()
xpdf = np.linspace(xmin, xmax, num=500)
ax.plot(xpdf, st.norm.pdf(xpdf, loc=MU, scale=SIGMA), linestyle='dotted', lw=1, color='orange')
#
# Acceptance rate
print('Plotting acceptance rate')
sns.distplot(accept_hmc.flatten(), ax=ax_accept)
ax_accept.set_title('Smoothed acceptance rates')
fig.savefig('hmc-samples.pdf')
